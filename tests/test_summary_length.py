#!/usr/bin/env python3
"""
Test script to demonstrate the new concise summary format
and show character count improvements.
"""

import asyncio
import logging
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'custom_components', 'satcom_forecast'))

from forecast_fetcher import fetch_forecast
from forecast_parser import format_forecast

# Configure logging
logging.basicConfig(level=logging.DEBUG)
_LOGGER = logging.getLogger(__name__)

async def test_summary_length():
    """Test the new concise summary format with character count analysis."""
    print("üöÄ Summary Length Test")
    print("=" * 50)
    
    # Test locations with different weather conditions
    test_locations = [
        ("Fairbanks, AK", 64.8378, -147.7164, "Summer - Rain, Thunderstorms, Fog"),
        ("Anchorage, AK", 61.11030, -149.79703, 'Coastal weather, rain, fog'),
        ("Miami, FL", 25.7617, -80.1918, "Hurricane Season - Wind, Rain, Thunderstorms"),
        ("Los Angeles, CA", 34.0522, -118.2437, "Spring - Fog Conditions"),
        ("Chicago, IL", 41.8781, -87.6298, "Spring - Rain, Thunderstorms"),
        ("Boston, MA", 42.3601, -71.0589, "Summer - Heat Wave, Rain")
    ]
    
    success_count = 0
    total_count = len(test_locations)
    
    for location_name, lat, lon, description in test_locations:
        print(f"\nüìç {location_name} - {description}")
        print("-" * 50)
        
        try:
            # Fetch forecast
            forecast_text = await fetch_forecast(lat, lon)
            
            # Format in all three modes
            summary = format_forecast(forecast_text, 'summary')
            compact = format_forecast(forecast_text, 'compact')
            full = format_forecast(forecast_text, 'full')
            
            # Display results with character counts
            print(f"üìù SUMMARY ({len(summary)} chars):")
            print(f"   {summary}")
            print(f"   {'‚úÖ Under 200 chars' if len(summary) <= 200 else '‚ùå Over 200 chars'}")
            
            print(f"\nüìù COMPACT ({len(compact)} chars):")
            print(f"   {compact[:100]}{'...' if len(compact) > 100 else ''}")
            
            print(f"\nüìù FULL ({len(full)} chars):")
            print(f"   {full[:100]}{'...' if len(full) > 100 else ''}")
            
            # Character count analysis
            print(f"\nüìä CHARACTER ANALYSIS:")
            print(f"   Summary: {len(summary)} chars ({len(summary)/200*100:.1f}% of 200 limit)")
            print(f"   Compact: {len(compact)} chars")
            print(f"   Full: {len(full)} chars")
            print(f"   Summary efficiency: {len(summary)/len(full)*100:.1f}% of full length")
            
            # Check if summary is under 200 chars
            if len(summary) <= 200:
                success_count += 1
            
        except Exception as e:
            print(f"‚ùå Error testing {location_name}: {e}")
    
    print(f"\nüéâ Summary Length Test Complete!")
    print("=" * 50)
    print("üìã KEY IMPROVEMENTS:")
    print("   ‚úÖ Summary format now under 200 characters")
    print("   ‚úÖ Prioritizes extreme weather events")
    print("   ‚úÖ Shows top weather conditions with percentages")
    print("   ‚úÖ Includes average event chance")
    print("   ‚úÖ Perfect for single email delivery")
    
    print(f"\nüìä Summary Length Test Results: {success_count}/{total_count} under 200 chars")
    return success_count == total_count

if __name__ == "__main__":
    asyncio.run(test_summary_length()) 