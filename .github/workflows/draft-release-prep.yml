name: Draft Release Preparation

on:
  release:
    types: [created]

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    if: github.event.release.draft == true
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.x'

      - name: Extract version from release tag
        id: version
        run: |
          # Remove 'v' prefix if present and extract version
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update pyproject.toml version
        run: |
          # Use sed to update the version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml
          echo "Updated pyproject.toml version to ${{ steps.version.outputs.version }}"

      - name: Update manifest.json version
        run: |
          # Use sed to update the version in manifest.json
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.version.outputs.version }}\"/" custom_components/satcom_forecast/manifest.json
          echo "Updated manifest.json version to ${{ steps.version.outputs.version }}"

      - name: Verify changes
        run: |
          echo "=== pyproject.toml version ==="
          grep "version = " pyproject.toml
          echo "=== manifest.json version ==="
          grep '"version":' custom_components/satcom_forecast/manifest.json

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        run: |
          git add pyproject.toml custom_components/satcom_forecast/manifest.json
          git commit -m "Bump version to ${{ steps.version.outputs.version }} for release ${{ github.event.release.tag_name }} [skip ci]"
          git push origin main

      - name: Create release assets
        run: |
          # Create a temporary directory for the release files
          mkdir -p temp_release
          cp -r custom_components temp_release/
          cp pyproject.toml temp_release/
          cp README.md temp_release/
          cp LICENSE temp_release/
          
          # Create a zip file with the updated version
          cd temp_release
          zip -r ../satcom-forecast-${{ steps.version.outputs.version }}.zip .
          cd ..
          
          # Upload the assets to the draft release
          gh release upload ${{ github.event.release.tag_name }} satcom-forecast-${{ steps.version.outputs.version }}.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release notes
        run: |
          gh release edit ${{ github.event.release.tag_name }} \
            --notes "${{ github.event.release.body }}
          
          **Release Preparation Complete:**
          - Version bumped to ${{ steps.version.outputs.version }}
          - Release assets updated with correct version numbers
          - Ready to publish when you're satisfied with the changes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request for review
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Bump version to ${{ steps.version.outputs.version }} for release"
          title: "Release Preparation: Bump version to ${{ steps.version.outputs.version }}"
          body: |
            ## Release Preparation Complete
            
            This PR contains the version bump for release ${{ github.event.release.tag_name }}.
            
            **Changes:**
            - Updated `pyproject.toml` version to ${{ steps.version.outputs.version }}
            - Updated `manifest.json` version to ${{ steps.version.outputs.version }}
            - Release assets have been prepared with correct version numbers
            
            **Next Steps:**
            1. Review the changes
            2. Merge this PR
            3. Publish the draft release when ready
            
            **Note:** The release is currently in draft mode. You can review and edit it before publishing.
          branch: release-prep-${{ steps.version.outputs.version }}
          base: main 