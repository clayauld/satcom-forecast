name: Pre-Release Version Bump

on:
  release:
    types: [created]

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.x'

      - name: Extract version from release tag
        id: version
        run: |
          # Remove 'v' prefix if present and extract version
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check current versions in files
        id: current_versions
        run: |
          # Extract current version from pyproject.toml
          CURRENT_PYPROJECT=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_pyproject=$CURRENT_PYPROJECT" >> $GITHUB_OUTPUT
          
          # Extract current version from manifest.json
          CURRENT_MANIFEST=$(grep '"version":' custom_components/satcom_forecast/manifest.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "current_manifest=$CURRENT_MANIFEST" >> $GITHUB_OUTPUT
          
          echo "Current pyproject.toml version: $CURRENT_PYPROJECT"
          echo "Current manifest.json version: $CURRENT_MANIFEST"
          echo "Release tag version: ${{ steps.version.outputs.version }}"

      - name: Check if version bump is needed
        id: version_check
        run: |
          if [ "${{ steps.current_versions.outputs.current_pyproject }}" = "${{ steps.version.outputs.version }}" ] && [ "${{ steps.current_versions.outputs.current_manifest }}" = "${{ steps.version.outputs.version }}" ]; then
            echo "Versions already match release tag. Skipping version bump."
            echo "skip_bump=true" >> $GITHUB_OUTPUT
          else
            echo "Version bump needed. Proceeding with updates."
            echo "skip_bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Update pyproject.toml version
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Use sed to update the version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml
          echo "Updated pyproject.toml version to ${{ steps.version.outputs.version }}"

      - name: Update manifest.json version
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Use sed to update the version in manifest.json
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.version.outputs.version }}\"/" custom_components/satcom_forecast/manifest.json
          echo "Updated manifest.json version to ${{ steps.version.outputs.version }}"

      - name: Verify changes
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          echo "=== pyproject.toml version ==="
          grep "version = " pyproject.toml
          echo "=== manifest.json version ==="
          grep '"version":' custom_components/satcom_forecast/manifest.json

      - name: Configure Git
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Ensure main branch is checked out
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          git fetch origin main
          git checkout main

      - name: Commit and push changes
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Add and commit the changes
          git add pyproject.toml custom_components/satcom_forecast/manifest.json
          git commit -m "Bump version to ${{ steps.version.outputs.version }} for release ${{ github.event.release.tag_name }} [skip ci]"
          git push origin main

      - name: Update git tag to match new version
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Delete the old tag (if it exists)
          git tag -d ${{ github.event.release.tag_name }} || true
          git push origin :refs/tags/${{ github.event.release.tag_name }} || true
          
          # Create new tag with the updated version
          git tag ${{ github.event.release.tag_name }}
          git push origin ${{ github.event.release.tag_name }}

      - name: Update release with new assets
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Create a temporary directory for the updated files
          mkdir -p temp_release
          cp -r custom_components temp_release/
          cp pyproject.toml temp_release/
          cp README.md temp_release/
          cp LICENSE temp_release/
          
          # Create a zip file with the updated version
          cd temp_release
          zip -r ../satcom-forecast-${{ steps.version.outputs.version }}.zip .
          cd ..
          
          # Upload the updated assets to the release
          gh release upload ${{ github.event.release.tag_name }} satcom-forecast-${{ steps.version.outputs.version }}.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure release is published
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Check if release is draft and publish it if needed
          RELEASE_STATUS=$(gh release view ${{ github.event.release.tag_name }} --json draft --jq '.draft')
          if [ "$RELEASE_STATUS" = "true" ]; then
            echo "Release is in draft status. Publishing now..."
            gh release edit ${{ github.event.release.tag_name }} --draft=false
          else
            echo "Release is already published."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add version update note to release
        if: steps.version_check.outputs.skip_bump != 'true'
        run: |
          # Get current release notes
          CURRENT_NOTES=$(gh release view ${{ github.event.release.tag_name }} --json body --jq '.body')
          
          # Check if version update note already exists
          if echo "$CURRENT_NOTES" | grep -q "Version numbers have been automatically updated"; then
            echo "Version update note already exists in release notes."
          else
            # Add version update note to existing notes
            UPDATED_NOTES="$CURRENT_NOTES

**Note:** Version numbers have been automatically updated to ${{ steps.version.outputs.version }} in the release artifacts."
            
            # Update release notes
            gh release edit ${{ github.event.release.tag_name }} --notes "$UPDATED_NOTES"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip message
        if: steps.version_check.outputs.skip_bump == 'true'
        run: |
          echo "âœ… No version bump needed - files already match release tag ${{ github.event.release.tag_name }}"
          echo "Skipping version update and asset creation." 